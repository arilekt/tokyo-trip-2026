#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Tokyo Trip Generator - 2025-07-06 Version (Fixed)
================================================
‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏¥‡∏õ‡πÇ‡∏ï‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß ‡πÇ‡∏î‡∏¢‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≤‡∏Å content/*.md 
‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡∏•‡∏á‡πÉ‡∏ô template.html ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£

Features:
- ‡∏≠‡πà‡∏≤‡∏ô .md files ‡∏à‡∏≤‡∏Å content/th/ ‡πÅ‡∏•‡∏∞ content/en/
- ‡∏™‡∏£‡πâ‡∏≤‡∏á navigation cards grid 
- ‡πÅ‡∏õ‡∏•‡∏á Markdown ‡πÄ‡∏õ‡πá‡∏ô HTML
- ‡∏£‡∏ß‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏ô template.html
- Multi-language support (TH/EN)
- Timeline expand/collapse functionality

Author: Claude AI Assistant
Date: 6 July 2025
"""

import os
import re
import datetime
from pathlib import Path

class TokyoTripGenerator:
    def __init__(self):
        # Setup paths
        self.script_dir = Path(__file__).parent
        self.project_dir = self.script_dir.parent
        self.content_dir = self.project_dir / "content"
        self.th_dir = self.content_dir / "th"
        self.en_dir = self.content_dir / "en"
        self.build_dir = self.project_dir / "build"
        self.template_file = self.script_dir / "template" / "template.html"
        
        # Create build directory if not exists
        self.build_dir.mkdir(exist_ok=True)
        
        print(f"üèóÔ∏è Tokyo Trip Generator Initialized")
        print(f"üìÅ Thai content: {self.th_dir}")
        print(f"üìÅ English content: {self.en_dir}")
        print(f"üìÅ Build output: {self.build_dir}")
        print(f"üìÑ Template: {self.template_file}")
    
    def read_file(self, file_path):
        """‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢ UTF-8 encoding"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return f.read()
        except FileNotFoundError:
            print(f"‚ö†Ô∏è File not found: {file_path}")
            return ""
        except Exception as e:
            print(f"‚ùå Error reading {file_path}: {e}")
            return ""
    
    def markdown_to_html(self, markdown_text):
        """‡πÅ‡∏õ‡∏•‡∏á Markdown ‡πÄ‡∏õ‡πá‡∏ô HTML"""
        if not markdown_text.strip():
            return ""
        
        html = markdown_text
        
        # Headers
        html = re.sub(r'^#### (.+)$', r'<h4>\1</h4>', html, flags=re.MULTILINE)
        html = re.sub(r'^### (.+)$', r'<h3>\1</h3>', html, flags=re.MULTILINE)
        html = re.sub(r'^## (.+)$', r'<h2>\1</h2>', html, flags=re.MULTILINE)
        html = re.sub(r'^# (.+)$', r'<h1>\1</h1>', html, flags=re.MULTILINE)
        
        # Bold and italic
        html = re.sub(r'\*\*(.+?)\*\*', r'<strong>\1</strong>', html)
        html = re.sub(r'\*(.+?)\*', r'<em>\1</em>', html)
        
        # Tables (basic markdown table support)
        html = self.convert_tables(html)
        
        # Timeline items (‡πÄ‡∏ä‡πà‡∏ô - **‡πÄ‡∏ß‡∏•‡∏≤**: ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤)
        html = self.convert_timeline_items(html)
        
        # Lists
        html = self.convert_lists(html)
        
        # Paragraphs
        html = self.convert_paragraphs(html)
        
        return html
    
    def convert_tables(self, html):
        """‡πÅ‡∏õ‡∏•‡∏á markdown tables ‡πÄ‡∏õ‡πá‡∏ô HTML tables"""
        lines = html.split('\n')
        result = []
        in_table = False
        
        i = 0
        while i < len(lines):
            line = lines[i].strip()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô table header
            if '|' in line and not in_table and line.count('|') >= 2:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô separator
                if i + 1 < len(lines) and re.match(r'^\s*\|[\s\-\|:]*\|\s*$', lines[i + 1]):
                    in_table = True
                    result.append('<table class="table">')
                    result.append('<thead>')
                    
                    # Header row
                    headers = [cell.strip() for cell in line.split('|') if cell.strip()]
                    result.append('<tr>')
                    for header in headers:
                        result.append(f'<th>{header}</th>')
                    result.append('</tr>')
                    result.append('</thead>')
                    result.append('<tbody>')
                    
                    i += 2  # ‡∏Ç‡πâ‡∏≤‡∏° separator line
                    continue
                    
            elif '|' in line and in_table and line.count('|') >= 2:
                # Table row
                cells = [cell.strip() for cell in line.split('|') if cell.strip()]
                if cells:
                    result.append('<tr>')
                    for cell in cells:
                        result.append(f'<td>{cell}</td>')
                    result.append('</tr>')
                else:
                    # ‡∏à‡∏ö table
                    result.append('</tbody>')
                    result.append('</table>')
                    in_table = False
                    
            elif in_table and ('|' not in line or line.count('|') < 2):
                # ‡∏à‡∏ö table
                result.append('</tbody>')
                result.append('</table>')
                in_table = False
                result.append(line)
                
            else:
                result.append(line)
                
            i += 1
        
        # ‡∏õ‡∏¥‡∏î table ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
        if in_table:
            result.append('</tbody>')
            result.append('</table>')
            
        return '\n'.join(result)
    
    def convert_timeline_items(self, html):
        """‡πÅ‡∏õ‡∏•‡∏á timeline items ‡πÄ‡∏õ‡πá‡∏ô HTML timeline"""
        lines = html.split('\n')
        result = []
        in_timeline = False
        timeline_id = 0
        
        for line in lines:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö timeline item pattern: - **‡πÄ‡∏ß‡∏•‡∏≤**: ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
            timeline_match = re.match(r'^\s*-\s*\*\*([^*]+)\*\*:\s*(.+)', line)
            
            if timeline_match:
                if not in_timeline:
                    result.append('<ul class="timeline">')
                    in_timeline = True
                    
                time_text = timeline_match.group(1)
                content_text = timeline_match.group(2)
                timeline_id += 1
                
                result.append('<li>')
                result.append(f'<div class="timeline-main">{time_text}: {content_text}</div>')
                result.append(f'<button class="timeline-toggle" onclick="toggleTimelineDetail(\'timeline-{timeline_id}\')">' +
                             f'<span class="th">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‚ñº</span><span class="en">Details ‚ñº</span></button>')
                result.append(f'<div class="timeline-detail" id="timeline-{timeline_id}" style="display: none;">')
                
            elif line.strip().startswith('  -') and in_timeline:
                # Sub-item ‡∏Ç‡∏≠‡∏á timeline
                sub_content = line.strip()[2:].strip()
                result.append(f'<ul><li>{sub_content}</li></ul>')
                
            elif line.strip().startswith('  ') and in_timeline and line.strip():
                # ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                detail_content = line.strip()
                result.append(f'<p>{detail_content}</p>')
                
            else:
                if in_timeline:
                    # ‡∏õ‡∏¥‡∏î timeline detail ‡πÅ‡∏•‡∏∞ li
                    result.append('</div>')
                    result.append('</li>')
                    
                    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà timeline item ‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î timeline
                    if not re.match(r'^\s*-\s*\*\*([^*]+)\*\*:\s*(.+)', line):
                        result.append('</ul>')
                        in_timeline = False
                        
                result.append(line)
        
        # ‡∏õ‡∏¥‡∏î timeline ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
        if in_timeline:
            result.append('</div>')
            result.append('</li>')
            result.append('</ul>')
            
        return '\n'.join(result)
    
    def convert_lists(self, html):
        """‡πÅ‡∏õ‡∏•‡∏á lists"""
        lines = html.split('\n')
        result = []
        in_list = False
        
        for line in lines:
            if re.match(r'^\s*[-*]\s+', line):
                if not in_list:
                    result.append('<ul>')
                    in_list = True
                item = re.sub(r'^\s*[-*]\s+', '', line)
                result.append(f'<li>{item}</li>')
            else:
                if in_list:
                    result.append('</ul>')
                    in_list = False
                result.append(line)
        
        if in_list:
            result.append('</ul>')
            
        return '\n'.join(result)
    
    def convert_paragraphs(self, html):
        """‡πÅ‡∏õ‡∏•‡∏á paragraphs"""
        lines = html.split('\n')
        result = []
        
        for line in lines:
            line = line.strip()
            if line and not line.startswith('<') and not re.match(r'^\s*[-*]\s+', line):
                result.append(f'<p>{line}</p>')
            else:
                result.append(line)
                
        return '\n'.join(result)
    
    def read_content_files(self):
        """‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå content ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        content_data = {}
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
        if self.th_dir.exists():
            for md_file in sorted(self.th_dir.glob("*.md")):
                file_key = md_file.stem  # ‡πÄ‡∏ä‡πà‡∏ô 001-overview
                content_data[file_key] = {
                    'th': self.read_file(md_file),
                    'en': ''
                }
                print(f"üìÑ Read TH: {md_file.name}")
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if self.en_dir.exists():
            for md_file in sorted(self.en_dir.glob("*.md")):
                file_key = md_file.stem
                if file_key in content_data:
                    content_data[file_key]['en'] = self.read_file(md_file)
                    print(f"üìÑ Read EN: {md_file.name}")
                else:
                    content_data[file_key] = {
                        'th': '',
                        'en': self.read_file(md_file)
                    }
                    print(f"üìÑ Read EN: {md_file.name}")
        
        return content_data
    
    def extract_day_info(self, day_content):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å day content ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á navigation card"""
        content = day_content.get('th', '')
        
        # ‡∏î‡∏∂‡∏á title ‡∏´‡∏•‡∏±‡∏Å
        title_match = re.search(r'^# (.+?)$', content, re.MULTILINE)
        title = title_match.group(1) if title_match else ""
        
        # ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        date_match = re.search(r'(\d+ ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏° \d+)', title)
        date = date_match.group(1) if date_match else ""
        
        # ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏à‡∏≤‡∏Å title ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
        if '-' in title:
            desc = title.split('-', 1)[1].strip()
        else:
            # ‡∏´‡∏≤ paragraph ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà header
            desc_match = re.search(r'\n\n(.+?)(?:\n\n|\n#|$)', content)
            desc = desc_match.group(1).strip() if desc_match else ""
        
        return {
            'title': title,
            'date': date,
            'desc': desc
        }
    
    def build_nav_section(self, content_data):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á nav-section ‡∏û‡∏£‡πâ‡∏≠‡∏° navigation cards"""
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á navigation cards
        nav_cards = []
        day_files = sorted([k for k in content_data.keys() if k.startswith('00') and k[2:3].isdigit() and int(k[2:3]) >= 3])
        
        for i, file_key in enumerate(day_files, 1):
            if file_key.startswith('003'):  # day1
                nav_cards.append(f'''
                <a href="#day-1" class="nav-card">
                    <h3><span class="th">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏π‡πà‡πÇ‡∏ï‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß</span><span class="en">Day 1: Journey to Tokyo</span></h3>
                    <div class="date"><span class="th">6 ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏° 2026</span><span class="en">March 6, 2026</span></div>
                    <div class="desc"><span class="th">‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡πÑ‡∏õ‡πÇ‡∏ï‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°</span><span class="en">Flight from Bangkok to Tokyo, hotel check-in</span></div>
                </a>''')
            elif file_key.startswith('004'):  # day2
                nav_cards.append(f'''
                <a href="#day-2" class="nav-card">
                    <h3><span class="th">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏≠‡∏≤‡∏ã‡∏≤‡∏Å‡∏∏‡∏ã‡∏≤ ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏î‡πÄ‡∏ã‡∏ô‡πÇ‡∏ã‡∏à‡∏¥</span><span class="en">Day 2: Asakusa & Sensoji Temple</span></h3>
                    <div class="date"><span class="th">7 ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏° 2026</span><span class="en">March 7, 2026</span></div>
                    <div class="desc"><span class="th">‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ä‡∏°‡∏ß‡∏±‡∏î‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏Å‡πà ‡∏ä‡∏°‡∏¢‡∏≤‡∏ô‡∏ô‡∏≤‡∏Å‡∏≤‡∏°‡∏¥‡πÄ‡∏ã</span><span class="en">Visit ancient temples, traditional Tokyo</span></div>
                </a>''')
            elif file_key.startswith('005'):  # day3
                nav_cards.append(f'''
                <a href="#day-3" class="nav-card">
                    <h3><span class="th">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏≠‡∏∏‡πÄ‡∏≠‡πÇ‡∏ô‡∏∞ ‡πÅ‡∏•‡∏∞‡∏Æ‡∏≤‡∏£‡∏≤‡∏à‡∏∏‡∏Å‡∏∏</span><span class="en">Day 3: Ueno & Harajuku</span></h3>
                    <div class="date"><span class="th">8 ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏° 2026</span><span class="en">March 8, 2026</span></div>
                    <div class="desc"><span class="th">‡∏™‡∏ß‡∏ô‡∏≠‡∏∏‡πÄ‡∏≠‡πÇ‡∏ô‡∏∞ ‡∏¢‡πà‡∏≤‡∏ô‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡∏µ‡πâ</span><span class="en">Ueno Park and trendy Harajuku district</span></div>
                </a>''')
            elif file_key.startswith('006'):  # day4 - ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î
                nav_cards.append(f'''
                <a href="#day-4" class="nav-card">
                    <div class="birthday-badge">üéÇ ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î!</div>
                    <h3><span class="th">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏≠‡∏¢‡πÑ‡∏à‡πà! üéÇ</span><span class="en">Day 4: Pojai's Birthday! üéÇ</span></h3>
                    <div class="date"><span class="th">9 ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏° 2026</span><span class="en">March 9, 2026</span></div>
                    <div class="desc"><span class="th">‡∏ß‡∏±‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏õ‡∏≠‡∏¢‡πÑ‡∏à‡πà! ‡∏î‡∏¥‡∏™‡∏ô‡∏µ‡∏¢‡πå‡∏ã‡∏µ ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©</span><span class="en">Special birthday celebration! DisneySea</span></div>
                </a>''')
            elif file_key.startswith('007'):  # day5
                nav_cards.append(f'''
                <a href="#day-5" class="nav-card">
                    <h3><span class="th">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 5: ‡∏ä‡∏¥‡∏ö‡∏∏‡∏¢‡∏∞ ‡πÅ‡∏•‡∏∞‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á</span><span class="en">Day 5: Shibuya & Shopping</span></h3>
                    <div class="date"><span class="th">10 ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏° 2026</span><span class="en">March 10, 2026</span></div>
                    <div class="desc"><span class="th">‡πÄ‡∏î‡∏¥‡∏ô‡∏ä‡∏¥‡∏ö‡∏∏‡∏¢‡∏∞ ‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏ù‡∏≤‡∏Å</span><span class="en">Explore Shibuya, shopping for souvenirs</span></div>
                </a>''')
            elif file_key.startswith('008'):  # day6
                nav_cards.append(f'''
                <a href="#day-6" class="nav-card">
                    <h3><span class="th">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 6: ‡∏ü‡∏π‡∏à‡∏¥-‡∏Ñ‡∏¥‡∏ß ‡πÑ‡∏Æ‡πÅ‡∏•‡∏ô‡∏î‡πå</span><span class="en">Day 6: Fuji-Q Highland</span></h3>
                    <div class="date"><span class="th">11 ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏° 2026</span><span class="en">March 11, 2026</span></div>
                    <div class="desc"><span class="th">‡∏™‡∏ß‡∏ô‡∏™‡∏ô‡∏∏‡∏Å‡∏ü‡∏π‡∏à‡∏¥-‡∏Ñ‡∏¥‡∏ß ‡∏ä‡∏°‡∏†‡∏π‡πÄ‡∏Ç‡∏≤‡πÑ‡∏ü‡∏ü‡∏π‡∏à‡∏¥</span><span class="en">Fuji-Q Highland theme park, Mount Fuji</span></div>
                </a>''')
            elif file_key.startswith('009'):  # day7
                nav_cards.append(f'''
                <a href="#day-7" class="nav-card">
                    <h3><span class="th">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 7: ‡πÇ‡∏≠‡πÑ‡∏î‡∏ö‡∏∞ ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Å‡∏•‡∏±‡∏ö</span><span class="en">Day 7: Odaiba & Departure Prep</span></h3>
                    <div class="date"><span class="th">12 ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏° 2026</span><span class="en">March 12, 2026</span></div>
                    <div class="desc"><span class="th">‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÇ‡∏≠‡πÑ‡∏î‡∏ö‡∏∞ ‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢</span><span class="en">Odaiba sightseeing, last-minute shopping</span></div>
                </a>''')
            elif file_key.startswith('010'):  # day8
                nav_cards.append(f'''
                <a href="#day-8" class="nav-card">
                    <h3><span class="th">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 8: ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô</span><span class="en">Day 8: Journey Home</span></h3>
                    <div class="date"><span class="th">13 ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏° 2026</span><span class="en">March 13, 2026</span></div>
                    <div class="desc"><span class="th">‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÇ‡∏ï‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß‡∏™‡∏π‡πà‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø</span><span class="en">Flight from Tokyo back to Bangkok</span></div>
                </a>''')
        
        nav_section = f'''
        <div class="nav-section">
            <h2><span class="th">‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á</span><span class="en">Trip Overview</span></h2>
            <div class="nav-grid">
                {"".join(nav_cards)}
            </div>
        </div>
        '''
        
        return nav_section
    
    def build_content_sections(self, content_data):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á content-sections ‡∏à‡∏≤‡∏Å content files"""
        sections_html = ""
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ overview ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏£‡∏Å
        all_keys = sorted(content_data.keys())
        
        for file_key in all_keys:
            content = content_data[file_key]
            
            # ‡πÅ‡∏õ‡∏•‡∏á markdown ‡πÄ‡∏õ‡πá‡∏ô HTML
            th_html = self.markdown_to_html(content['th'])
            en_html = self.markdown_to_html(content['en'] if content['en'] else content['th'])
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á section ID
            if file_key.startswith('003'):
                section_id = "day-1"
            elif file_key.startswith('004'):
                section_id = "day-2"
            elif file_key.startswith('005'):
                section_id = "day-3"
            elif file_key.startswith('006'):
                section_id = "day-4"
            elif file_key.startswith('007'):
                section_id = "day-5"
            elif file_key.startswith('008'):
                section_id = "day-6"
            elif file_key.startswith('009'):
                section_id = "day-7"
            elif file_key.startswith('010'):
                section_id = "day-8"
            else:
                section_id = file_key.replace('-', '_')
            
            section_html = f'''
            <div class="content-section" id="{section_id}">
                <div class="th">
                    {th_html}
                </div>
                <div class="en">
                    {en_html}
                </div>
            </div>
            '''
            
            sections_html += section_html
            print(f"‚úÖ Built section: {file_key} ‚Üí #{section_id}")
        
        return sections_html
    
    def add_back_to_top(self, html):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° back to top button"""
        back_to_top_html = '''
        <div class="back-to-top" onclick="scrollToTop()" style="
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: var(--primary);
            color: white;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: var(--shadow);
            font-size: 1.2rem;
            z-index: 1000;
            transition: var(--transition);
        ">‚¨Ü</div>
        
        <script>
        function scrollToTop() {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        }
        
        // Show/hide back to top button
        window.addEventListener('scroll', function() {
            const backToTop = document.querySelector('.back-to-top');
            if (window.pageYOffset > 300) {
                backToTop.style.opacity = '1';
            } else {
                backToTop.style.opacity = '0.7';
            }
        });
        </script>
        '''
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡πà‡∏≠‡∏ô </body>
        html = html.replace('</body>', back_to_top_html + '</body>')
        return html
    
    def generate_html(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á HTML file ‡∏´‡∏•‡∏±‡∏Å"""
        print("\nüöÄ Starting HTML generation...")
        
        # ‡∏≠‡πà‡∏≤‡∏ô template
        template_html = self.read_file(self.template_file)
        if not template_html:
            print("‚ùå Could not read template file!")
            return None
        
        # ‡∏≠‡πà‡∏≤‡∏ô content files
        content_data = self.read_content_files()
        if not content_data:
            print("‚ùå No content files found!")
            return None
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á nav section ‡∏û‡∏£‡πâ‡∏≠‡∏° cards
        nav_section = self.build_nav_section(content_data)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á content sections
        content_sections = self.build_content_sections(content_data)
        
        # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà nav-section ‡πÉ‡∏ô template
        nav_pattern = r'<div class="nav-section">.*?</div>(?=\s*<div class="content-section")'
        template_html = re.sub(nav_pattern, nav_section, template_html, flags=re.DOTALL)
        
        # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà content-sections ‡πÉ‡∏ô template  
        content_pattern = r'<div class="content-section".*?</div>(?=\s*</div>\s*</body>)'
        template_html = re.sub(content_pattern, content_sections, template_html, flags=re.DOTALL)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° back to top
        template_html = self.add_back_to_top(template_html)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
        timestamp = datetime.datetime.now().strftime("%Y%m%d")
        output_filename = f"Tokyo-Trip-March-2026-Generated-{timestamp}.html"
        output_path = self.build_dir / output_filename
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
        try:
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(template_html)
            
            file_size = output_path.stat().st_size
            print(f"\nüéâ HTML generated successfully!")
            print(f"üìÑ File: {output_filename}")
            print(f"üìç Path: {output_path}")
            print(f"üìä Size: {file_size:,} bytes ({file_size/1024:.1f} KB)")
            
            return output_path
            
        except Exception as e:
            print(f"‚ùå Error writing file: {e}")
            return None

def main():
    """Main function"""
    print("üáØüáµ Tokyo Trip Generator 2025-07-06 (Fixed)")
    print("=" * 50)
    
    generator = TokyoTripGenerator()
    result = generator.generate_html()
    
    if result:
        print("\n‚úÖ Generation completed successfully!")
        print(f"üåê Open {result} in your browser to view the guide.")
        print("\nüìã Features included:")
        print("   ‚úÖ Navigation cards grid (8 days)")
        print("   ‚úÖ Content sections from markdown files")
        print("   ‚úÖ Timeline expand/collapse functionality")
        print("   ‚úÖ Multi-language support (TH/EN)")
        print("   ‚úÖ Back to top button")
        print("   ‚úÖ Responsive design")
    else:
        print("\n‚ùå Generation failed!")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())

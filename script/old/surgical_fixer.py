#!/usr/bin/env python3
"""
üîß SURGICAL SYNTAX FIXER
‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç syntax errors ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏∑‡πà‡∏ô
"""

import re
from pathlib import Path

def surgical_fix_syntax_errors(source_file, target_file):
    """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç syntax errors ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á"""
    
    print(f"üîß Surgical fixing: {source_file} -> {target_file}")
    
    with open(source_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    original_lines = len(content.split('\n'))
    print(f"üìÑ Original file: {original_lines} lines")
    
    # ‡πÅ‡∏Å‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ syntax errors ‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å
    fixes_applied = 0
    
    # Fix 1: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç regex patterns ‡∏ó‡∏µ‡πà‡∏°‡∏µ syntax error
    if ", line)" in content and not content.count("re.match") == content.count(", line)"):
        print("‚ö†Ô∏è  Found potential syntax errors with ', line)'")
        
        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        lines = content.split('\n')
        fixed_lines = []
        
        i = 0
        while i < len(lines):
            line = lines[i]
            
            # ‡∏´‡∏≤ pattern ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢: ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ re.match ‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏°‡∏µ , line) ‡πÇ‡∏î‡∏î‡πÜ
            if ("re.match(r'" in line and 
                i < len(lines) - 1 and 
                lines[i + 1].strip() == ", line)"):
                
                # ‡∏£‡∏ß‡∏°‡∏™‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
                fixed_line = line + ", line)"
                fixed_lines.append(fixed_line)
                print(f"‚úÖ Fixed line {i+1}-{i+2}: Combined regex pattern")
                fixes_applied += 1
                i += 2  # ‡∏Ç‡πâ‡∏≤‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                continue
            
            # ‡∏´‡∏≤ pattern ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢
            elif line.strip() == ", line)" and i > 0:
                # ‡∏Ç‡πâ‡∏≤‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà , line) ‡πÇ‡∏î‡∏î‡πÜ
                print(f"‚ö†Ô∏è  Removed orphaned line {i+1}: {line.strip()}")
                fixes_applied += 1
                i += 1
                continue
            
            fixed_lines.append(line)
            i += 1
        
        content = '\n'.join(fixed_lines)
    
    # Fix 2: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç indentation errors
    if "IndentationError" in str(content) or content.count('"""') % 2 != 0:
        print("‚ö†Ô∏è  Checking for indentation issues...")
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö function definitions ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ proper indentation
        lines = content.split('\n')
        for i, line in enumerate(lines):
            if line.strip().startswith('def ') and line.strip().endswith(':'):
                if i < len(lines) - 1:
                    next_line = lines[i + 1]
                    if next_line.strip().startswith('"""') and not next_line.startswith('    '):
                        lines[i + 1] = '    ' + next_line.lstrip()
                        print(f"‚úÖ Fixed indentation at line {i+2}")
                        fixes_applied += 1
        
        content = '\n'.join(lines)
    
    # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
    with open(target_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    new_lines = len(content.split('\n'))
    print(f"üìÑ Fixed file: {new_lines} lines")
    print(f"üîß Applied {fixes_applied} fixes")
    
    return fixes_applied > 0

def main():
    """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö"""
    script_dir = Path(__file__).parent
    
    # ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å old/
    source_file = script_dir / "old" / "claude-tokyo_trip_generator-final-20250617.py"
    target_file = script_dir / "claude-tokyo_trip_generator-SURGICAL-FIXED-20250620.py"
    
    if source_file.exists():
        success = surgical_fix_syntax_errors(source_file, target_file)
        if success:
            print(f"üéâ Successfully created: {target_file}")
            print(f"üöÄ Try running: python {target_file.name}")
        else:
            print(f"‚ÑπÔ∏è  No fixes needed, copied as-is: {target_file}")
    else:
        print(f"‚ùå Source file not found: {source_file}")

if __name__ == "__main__":
    main()

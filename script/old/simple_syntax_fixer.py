#!/usr/bin/env python3
"""
üîß SIMPLE BUT EFFECTIVE SYNTAX FIXER
‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç syntax errors ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ regex ‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
"""

import os
from pathlib import Path

def simple_fix_python_syntax(file_path):
    """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç syntax errors ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ"""
    
    print(f"üîß Simple fixing syntax errors in: {file_path}")
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    original_content = content
    lines = content.split('\n')
    fixed_lines = []
    
    i = 0
    fixes_count = 0
    
    while i < len(lines):
        line = lines[i]
        
        # Fix 1: ‡∏´‡∏≤‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ single quote ‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô , line)
        if (i < len(lines) - 1 and 
            line.strip().endswith("'") and 
            "re.match" in line and
            lines[i + 1].strip() == ", line)"):
            
            # ‡∏£‡∏ß‡∏°‡∏™‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            combined_line = line + ", line)"
            fixed_lines.append(combined_line)
            print(f"‚úÖ Fixed line {i+1}: Combined regex pattern")
            fixes_count += 1
            i += 2  # ‡∏Ç‡πâ‡∏≤‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            continue
            
        # Fix 2: ‡∏´‡∏≤‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ re.match ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ closing
        elif (i < len(lines) - 1 and
              "re.match(r'" in line and 
              not line.endswith(", line)") and
              not line.endswith("')") and
              ", line)" in lines[i + 1]):
            
            combined_line = line + ", line)"
            fixed_lines.append(combined_line)
            print(f"‚úÖ Fixed line {i+1}: Added missing , line)")
            fixes_count += 1
            i += 2
            continue
        
        # Fix 3: ‡∏•‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà , line) ‡πÇ‡∏î‡∏î‡πÜ
        elif line.strip() == ", line)":
            print(f"‚ö†Ô∏è  Removed orphaned line {i+1}: {line.strip()}")
            fixes_count += 1
            i += 1
            continue
        
        # Fix 4: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç specific broken patterns ‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å
        elif "match = re.match(r'- \\*\\*([^*]+)\\*\\*:\\s*(.*)'" in line and not line.endswith(", line)"):
            fixed_line = line + ", line)"
            fixed_lines.append(fixed_line)
            print(f"‚úÖ Fixed line {i+1}: Added missing , line) to timeline pattern")
            fixes_count += 1
            i += 1
            continue
            
        # Fix 5: header_match specific
        elif "header_match = re.match(r'^(#{1,6})\\s+(.+)'" in line and not line.endswith(", line)"):
            fixed_line = line + ", line)"
            fixed_lines.append(fixed_line)
            print(f"‚úÖ Fixed line {i+1}: Added missing , line) to header pattern")
            fixes_count += 1
            i += 1
            continue
        
        else:
            # ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ
            fixed_lines.append(line)
            i += 1
    
    # ‡∏£‡∏ß‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô string
    new_content = '\n'.join(fixed_lines)
    
    if new_content != original_content or fixes_count > 0:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå backup
        backup_path = str(file_path) + '.backup'
        with open(backup_path, 'w', encoding='utf-8') as f:
            f.write(original_content)
        print(f"üì¶ Backup saved: {backup_path}")
        
        # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(new_content)
        
        print(f"üéâ Fixed {fixes_count} syntax errors!")
        return True
    else:
        print("‚ÑπÔ∏è  No syntax errors found to fix.")
        return False

def validate_python_syntax(file_path):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå Python ‡∏°‡∏µ syntax error ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # ‡∏•‡∏≠‡∏á‡∏Ñ‡∏≠‡∏°‡πÑ‡∏û‡∏•‡πå
        compile(content, file_path, 'exec')
        print("‚úÖ Python syntax validation: PASSED")
        return True
    except SyntaxError as e:
        print(f"‚ùå Python syntax error still exists:")
        print(f"   Line {e.lineno}: {e.text.strip() if e.text else 'N/A'}")
        print(f"   Error: {e.msg}")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è  Other error during validation: {e}")
        return False

def show_problem_lines(file_path):
    """‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        print(f"üîç Checking for common problems...")
        problems = []
        
        for i, line in enumerate(lines, 1):
            # ‡∏´‡∏≤‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ , line) ‡πÇ‡∏î‡∏î‡πÜ
            if line.strip() == ", line)":
                problems.append(f"Line {i}: Orphaned ', line)'")
            
            # ‡∏´‡∏≤ regex ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
            elif "re.match(r'" in line and not line.strip().endswith(", line)") and not line.strip().endswith("')"):
                problems.append(f"Line {i}: Incomplete regex: {line.strip()[:50]}...")
        
        if problems:
            print(f"Found {len(problems)} potential problems:")
            for problem in problems[:5]:  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 5 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
                print(f"  - {problem}")
        else:
            print("No obvious problems found.")
            
    except Exception as e:
        print(f"Error checking file: {e}")

def main():
    """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"""
    script_dir = Path(__file__).parent
    target_file = script_dir / "claude-tokyo_trip_generator-final-20250618.py"
    
    if not target_file.exists():
        print(f"‚ùå File not found: {target_file}")
        return
    
    print("üîß Starting simple syntax fixing...")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
    show_problem_lines(target_file)
    
    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    success = simple_fix_python_syntax(target_file)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö syntax
    print("\nüîç Validating Python syntax...")
    if validate_python_syntax(target_file):
        print("üéâ SUCCESS! File is now syntactically correct!")
        print(f"üöÄ Try running: python {target_file.name}")
    else:
        print("üòî Still has syntax errors.")
        print("üîÑ You may need to check the file manually.")

if __name__ == "__main__":
    main()

#!/usr/bin/env python3
"""
üöÄ SUPER PYTHON SYNTAX FIXER
‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç syntax errors ‡∏ó‡∏∏‡∏Å‡πÅ‡∏ö‡∏ö ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á regex ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢
"""

import re
import os
from pathlib import Path

def super_fix_python_syntax(file_path):
    """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç syntax errors ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏≠‡∏ö‡∏à‡∏±‡∏Å‡∏£‡∏ß‡∏≤‡∏•"""
    
    print(f"üöÄ SUPER FIXING syntax errors in: {file_path}")
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    original_content = content
    lines = content.split('\n')
    fixed_lines = []
    
    i = 0
    fixes_count = 0
    
    while i < len(lines):
        line = lines[i]
        original_line = line
        
        # Fix 1: Regex ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î closing parenthesis
        if 'match = re.match(r\'' in line and not line.count('(') == line.count(')'):
            # ‡∏´‡∏≤‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏°‡∏µ , line)
            if i < len(lines) - 1 and ', line)' in lines[i + 1]:
                # ‡∏£‡∏ß‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
                combined = line + ', line)'
                fixed_lines.append(combined)
                print(f"‚úÖ Fix 1 - Line {i+1}: Combined regex pattern")
                fixes_count += 1
                i += 2
                continue
        
        # Fix 2: header_match regex ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î closing
        if 'header_match = re.match(r\'' in line and not line.endswith(', line)'):
            if i < len(lines) - 1 and lines[i + 1].strip() == ', line)':
                combined = line + ', line)'
                fixed_lines.append(combined)
                print(f"‚úÖ Fix 2 - Line {i+1}: Fixed header_match regex")
                fixes_count += 1
                i += 2
                continue
        
        # Fix 3: ‡∏•‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà , line) ‡πÇ‡∏î‡∏î‡πÜ
        if line.strip() == ', line)':
            print(f"‚ö†Ô∏è  Skipped orphaned line {i+1}: {line.strip()}")
            fixes_count += 1
            i += 1
            continue
        
        # Fix 4: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç regex patterns ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        if 're.match(r\'' in line and line.count('\'') == 1:
            # ‡∏Ç‡∏≤‡∏î closing quote
            if i < len(lines) - 1 and lines[i + 1].strip().startswith(', line)'):
                combined = line + '\', line)'
                fixed_lines.append(combined)
                print(f"‚úÖ Fix 4 - Line {i+1}: Added missing quote")
                fixes_count += 1
                i += 2
                continue
        
        # Fix 5: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç specific patterns ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
        fixes = [
            # Pattern 1: Timeline regex
            (r'match = re\.match\(r\'- \\*\\*\(\[^*\]\+\)\\*\\*:\\s\*\(\.\*\)\'$',
             r'match = re.match(r\'- \\*\\*([^*]+)\\*\\*:\\s*(.*)\', line)'),
            
            # Pattern 2: Header regex  
            (r'header_match = re\.match\(r\'\^\(#\{1,6\}\)\\s\+\(\.\+\)\'$',
             r'header_match = re.match(r\'^(#{1,6})\\s+(.+)\', line)'),
        ]
        
        modified = False
        for pattern, replacement in fixes:
            if re.search(pattern, line):
                line = re.sub(pattern, replacement, line)
                print(f"‚úÖ Fix 5 - Line {i+1}: Applied pattern fix")
                fixes_count += 1
                modified = True
                break
        
        fixed_lines.append(line)
        i += 1
    
    # ‡∏£‡∏ß‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô string
    new_content = '\n'.join(fixed_lines)
    
    if new_content != original_content or fixes_count > 0:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå backup
        backup_path = str(file_path) + '.backup'
        with open(backup_path, 'w', encoding='utf-8') as f:
            f.write(original_content)
        print(f"üì¶ Backup saved: {backup_path}")
        
        # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(new_content)
        
        print(f"üéâ SUPER FIXED {fixes_count} syntax errors!")
        return True
    else:
        print("‚ÑπÔ∏è  No syntax errors found.")
        return False

def validate_python_syntax(file_path):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå Python ‡∏°‡∏µ syntax error ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # ‡∏•‡∏≠‡∏á‡∏Ñ‡∏≠‡∏°‡πÑ‡∏û‡∏•‡πå
        compile(content, file_path, 'exec')
        print("‚úÖ Python syntax validation: PASSED")
        return True
    except SyntaxError as e:
        print(f"‚ùå Python syntax error found:")
        print(f"   Line {e.lineno}: {e.text}")
        print(f"   Error: {e.msg}")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è  Other error: {e}")
        return False

def main():
    """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"""
    script_dir = Path(__file__).parent
    target_file = script_dir / "claude-tokyo_trip_generator-final-20250618.py"
    
    if not target_file.exists():
        print(f"‚ùå File not found: {target_file}")
        return
    
    print("üîß Starting SUPER syntax fixing...")
    
    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    success = super_fix_python_syntax(target_file)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö syntax
    if validate_python_syntax(target_file):
        print("üéâ SUCCESS! File is now syntactically correct!")
        print(f"üöÄ Try running: python {target_file.name}")
    else:
        print("üîÑ Still has errors, trying one more time...")
        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 2
        super_fix_python_syntax(target_file)
        if validate_python_syntax(target_file):
            print("üéâ SUCCESS on second attempt!")
        else:
            print("üòî Still has syntax errors. Manual intervention needed.")

if __name__ == "__main__":
    main()

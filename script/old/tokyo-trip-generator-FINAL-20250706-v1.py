#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Tokyo Trip Generator - REFACTORED VERSION ‚≠ê
============================================
üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≤‡∏Å content/ ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á HTML guide ‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ >800KB 
üìÖ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ‡∏ó‡∏£‡∏¥‡∏õ‡πÇ‡∏ï‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß 6-13 ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏° 2026 (‡∏û‡πà‡∏≠‡∏•‡∏π‡∏Å)
‚ú® Features: Beautiful UI + Complete Content + Expand/Collapse

Author: Claude AI Assistant (Refactored)
Date: 6 July 2025
Version: REFACTORED-20250706
"""

import datetime
from pathlib import Path
import os
import re

class TokyoTripGenerator:
    """Generator ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≤‡∏Å content/ folders ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á HTML guide"""
    
    def __init__(self):
        self.script_dir = Path(__file__).parent
        self.project_dir = self.script_dir.parent
        self.content_dir = self.project_dir / "content"
        self.build_dir = self.project_dir / "build"
        self.build_dir.mkdir(exist_ok=True)
        
        # Check content folders
        self.th_dir = self.content_dir / "th"
        self.en_dir = self.content_dir / "en"
        
        print(f"üìÅ Initialized TokyoTripGenerator")
        print(f"   üìÇ Thai content: {self.th_dir}")
        print(f"   üìÇ English content: {self.en_dir}")
        print(f"   üìÇ Build output: {self.build_dir}")
        
    def read_markdown_file(self, filepath):
        """‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå markdown ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ encoding"""
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                content = f.read()
                print(f"   ‚úÖ Read: {filepath.name} ({len(content)} chars)")
                return content
        except FileNotFoundError:
            print(f"   ‚ö†Ô∏è File not found: {filepath}")
            return ""
        except Exception as e:
            print(f"   ‚ùå Error reading {filepath}: {e}")
            return ""
    
    def get_html_header(self):
        """HTML Header ‡∏û‡∏£‡πâ‡∏≠‡∏° CSS ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå"""
        return '''<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‡∏ó‡∏£‡∏¥‡∏õ‡πÇ‡∏ï‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏° 2026 - ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå</title>
    <style>
/* ===== CSS VARIABLES ===== */
:root {
    --primary: #2E86AB; 
    --secondary: #A23B72; 
    --accent: #F18F01; 
    --success: #C73E1D;
    --background: #F5F9FC; 
    --card-bg: #FFFFFF; 
    --text-primary: #2C3E50; 
    --text-secondary: #5A6C7D;
    --border: #E1E8ED; 
    --shadow: 0 4px 6px rgba(0,0,0,0.1); 
    --border-radius: 12px;
    --transition: all 0.3s cubic-bezier(0.4,0,0.2,1);
    --info-bg: #dbeafe; 
    --info-border: #3b82f6; 
    --note-bg: #f3f4f6; 
    --note-border: #6b7280;
}

/* ===== RESET & BASE ===== */
* { 
    margin: 0; 
    padding: 0; 
    box-sizing: border-box; 
}

body { 
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
    line-height: 1.6; 
    color: var(--text-primary);
    background: linear-gradient(135deg, var(--background) 0%, #E8F4F8 100%); 
    min-height: 100vh; 
    padding-top: 4rem;
}

.container { 
    max-width: 1200px; 
    margin: 0 auto; 
    padding: 2rem; 
}

/* ===== LANGUAGE SWITCHER ===== */
.language-switcher {
    position: fixed;
    top: 1rem;
    right: 1rem;
    z-index: 1000;
    display: flex;
    gap: 0.5rem;
}

.lang-btn {
    padding: 0.5rem 1.5rem;
    border: 2px solid var(--primary);
    background: white;
    color: var(--primary);
    border-radius: 25px;
    cursor: pointer;
    font-weight: 600;
    transition: var(--transition);
    box-shadow: var(--shadow);
}

.lang-btn.active {
    background: var(--primary);
    color: white;
    transform: translateY(-2px);
}

.lang-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.15);
}

/* ===== LANGUAGE VISIBILITY ===== */
.lang-th .en { display: none; }
.lang-en .th { display: none; }
.lang-th .th, .lang-en .en { display: inline; }
.lang-en .en-block, .lang-th .th-block { display: block; }
.lang-en .th-block, .lang-th .en-block { display: none; }

/* ===== HEADER ===== */
.header {
    text-align: center;
    margin-bottom: 3rem;
    padding: 3rem 2rem;
    background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
    color: white;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
    position: relative;
    overflow: hidden;
}

.header::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="50" cy="50" r="2" fill="rgba(255,255,255,0.1)"/></svg>') repeat;
    animation: sparkle 10s linear infinite;
}

@keyframes sparkle {
    from { transform: translateX(-100px) translateY(-100px) rotate(0deg); }
    to { transform: translateX(100px) translateY(100px) rotate(360deg); }
}

.header h1 {
    font-size: 2.8rem;
    margin-bottom: 1rem;
    font-weight: 700;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    position: relative;
    z-index: 1;
}

.header .subtitle {
    font-size: 1.3rem;
    opacity: 0.95;
    margin-bottom: 1rem;
    position: relative;
    z-index: 1;
}

.header .dates {
    font-size: 1.1rem;
    opacity: 0.9;
    font-weight: 500;
    position: relative;
    z-index: 1;
}

/* ===== NAVIGATION GRID ===== */
.nav-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
    margin: 2rem 0;
}

.nav-card {
    background: white;
    border-radius: var(--border-radius);
    padding: 1.5rem;
    text-decoration: none;
    color: var(--text-primary);
    box-shadow: var(--shadow);
    transition: var(--transition);
    border-left: 4px solid var(--accent);
    position: relative;
    overflow: hidden;
}

.nav-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.15);
}

.nav-card h3 {
    color: var(--primary);
    font-size: 1.4rem;
    margin-bottom: 0.5rem;
}

.nav-card .date {
    color: var(--secondary);
    font-weight: 600;
    margin-bottom: 0.5rem;
}

.nav-card .desc {
    color: var(--text-secondary);
    font-size: 0.95rem;
}

.birthday-badge {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    background: linear-gradient(45deg, #ff6b6b, #feca57);
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 15px;
    font-size: 0.8rem;
    font-weight: 600;
    animation: pulse 2s infinite;
}

@keyframes pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); }
}

/* ===== SECTIONS ===== */
.section {
    background: var(--card-bg);
    border-radius: var(--border-radius);
    padding: 2.5rem;
    margin-bottom: 2.5rem;
    box-shadow: var(--shadow);
    border-left: 5px solid var(--accent);
    transition: var(--transition);
}

.section:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.1);
}

.section h1 {
    color: var(--primary);
    margin-bottom: 2rem;
    font-size: 2.2rem;
    border-bottom: 3px solid var(--accent);
    padding-bottom: 0.5rem;
}

.section h2 {
    color: var(--secondary);
    margin: 2rem 0 1.5rem 0;
    font-size: 1.8rem;
    border-left: 4px solid var(--accent);
    padding-left: 1rem;
}

.section h3 {
    color: var(--primary);
    margin: 1.5rem 0 1rem 0;
    font-size: 1.4rem;
}
    </style>
</head>
<body class="lang-th">'''

    def get_navigation_and_body_start(self):
        """Navigation ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô body"""
        return '''
    <!-- Language Switcher -->
    <div class="language-switcher">
        <button class="lang-btn active" data-lang="th">üáπüá≠ ‡πÑ‡∏ó‡∏¢</button>
        <button class="lang-btn" data-lang="en">üá∫üá∏ English</button>
    </div>

    <div class="container">
        <!-- Header -->
        <header class="header">
            <h1>üáØüáµ ‡∏ó‡∏£‡∏¥‡∏õ‡πÇ‡∏ï‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏° 2026</h1>
            <div class="subtitle">‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡πà‡∏≠‡∏•‡∏π‡∏Å</div>
            <div class="dates">üìÖ 6-13 ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏° 2026 (8 ‡∏ß‡∏±‡∏ô 7 ‡∏Ñ‡∏∑‡∏ô)</div>
        </header>
'''
    def get_css_content_and_timeline(self):
        """CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Content styling ‡πÅ‡∏•‡∏∞ Timeline components"""
        return '''
/* ===== CONTENT STYLING ===== */
.content p {
    margin-bottom: 1rem;
    text-align: justify;
    line-height: 1.7;
}

.content ul {
    margin: 1rem 0 1rem 2rem;
}

.content ol {
    margin: 1rem 0 1rem 2rem;
}

.content li {
    margin-bottom: 0.5rem;
    line-height: 1.6;
}

.content strong {
    color: var(--primary);
    font-weight: 600;
}

.content em {
    color: var(--secondary);
    font-style: italic;
}

/* ===== INFO/NOTE BOXES ===== */
.info-box, .note-box {
    border-left: 4px solid var(--info-border);
    background: var(--info-bg);
    padding: 1.5rem;
    margin: 2rem 0;
    border-radius: 0 var(--border-radius) var(--border-radius) 0;
    box-shadow: var(--shadow);
}

.note-box {
    border-left-color: var(--note-border);
    background: var(--note-bg);
}

.info-box strong, .note-box strong {
    color: var(--info-border);
}

.note-box strong {
    color: var(--note-border);
}

/* ===== TIMELINE STYLES ===== */
.timeline {
    list-style: none;
    padding: 0;
    margin: 2rem 0;
    position: relative;
}

.timeline::before {
    content: '';
    position: absolute;
    left: 1.5rem;
    top: 0;
    bottom: 0;
    width: 3px;
    background: linear-gradient(to bottom, var(--primary), var(--accent));
    border-radius: 2px;
}

.timeline li {
    position: relative;
    padding: 1.5rem 0 1.5rem 4rem;
    border-bottom: 1px solid var(--border);
}

.timeline li:last-child {
    border-bottom: none;
}

.timeline li::before {
    content: '';
    position: absolute;
    left: 0.8rem;
    top: 2rem;
    width: 1.4rem;
    height: 1.4rem;
    background: var(--primary);
    border-radius: 50%;
    border: 3px solid white;
    box-shadow: 0 0 0 3px var(--primary);
    z-index: 1;
}

.timeline-main {
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 1rem;
}

.timeline-toggle {
    background: var(--accent);
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    cursor: pointer;
    font-size: 0.9rem;
    font-weight: 500;
    transition: var(--transition);
    margin-bottom: 1rem;
}

.timeline-toggle:hover {
    background: var(--secondary);
    transform: translateY(-1px);
}

.timeline-toggle.expanded {
    background: var(--secondary);
}

.timeline-detail {
    background: rgba(46, 134, 171, 0.05);
    border-radius: var(--border-radius);
    padding: 1rem;
    margin-top: 1rem;
    border-left: 3px solid var(--accent);
}

.timeline-sub-content p {
    margin-bottom: 0.5rem;
    font-size: 0.95rem;
    line-height: 1.5;
}

.timeline-sub-content p:last-child {
    margin-bottom: 0;
}

/* ===== TABLES ===== */
.table-container {
    overflow-x: auto;
    margin: 2rem 0;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
    background: white;
}

table {
    width: 100%;
    border-collapse: collapse;
    background: white;
}

th, td {
    padding: 1rem 0.75rem;
    text-align: left;
    border-bottom: 1px solid var(--border);
    vertical-align: top;
}

th {
    background: linear-gradient(135deg, var(--primary), var(--secondary));
    color: white;
    font-weight: 600;
    position: sticky;
    top: 0;
    z-index: 10;
}

tr:nth-child(even) {
    background: rgba(46, 134, 171, 0.05);
}

tr:hover {
    background: rgba(46, 134, 171, 0.1);
}

/* ===== BACK TO TOP ===== */
.back-to-top {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    background: var(--primary);
    color: white;
    width: 3rem;
    height: 3rem;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    text-decoration: none;
    font-size: 1.2rem;
    box-shadow: var(--shadow);
    transition: var(--transition);
    opacity: 0.5;
    pointer-events: none;
    z-index: 1000;
}

.back-to-top:hover {
    background: var(--secondary);
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.15);
}

/* ===== RESPONSIVE ===== */
@media (max-width: 768px) {
    .container { 
        padding: 1rem; 
    }
    
    .header { 
        padding: 2rem 1rem; 
    }
    
    .header h1 { 
        font-size: 2rem; 
    }
    
    .section { 
        padding: 1.5rem; 
    }
    
    .language-switcher { 
        top: 0.5rem; 
        right: 0.5rem; 
    }
    
    .nav-grid {
        grid-template-columns: 1fr;
    }
    
    .timeline li {
        padding-left: 3rem;
    }
    
    .timeline::before {
        left: 1rem;
    }
    
    .timeline li::before {
        left: 0.3rem;
    }
}

@media (max-width: 480px) {
    .header h1 {
        font-size: 1.5rem;
    }
    
    .header .subtitle {
        font-size: 1rem;
    }
    
    .lang-btn {
        padding: 0.4rem 1rem;
        font-size: 0.9rem;
    }
}
'''

    def get_navigation_overview(self):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á navigation overview ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡πÑ‡∏õ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô"""
    return '''
    <section class="section" id="overview">
        <h1>üìã ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á</h1>
        
        <!-- Quick Info -->
        <div class="info-box">
            <div class="info-toggle">
                <span class="th">üéØ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç</span>
                <span class="en">üéØ Essential Information</span>
            </div>
            <div class="info-detail">
                <div class="th">
                    <p><strong>üìÖ ‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á:</strong> 6-13 ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏° 2026 (8 ‡∏ß‡∏±‡∏ô 7 ‡∏Ñ‡∏∑‡∏ô)</p>
                    <p><strong>üë• ‡∏ú‡∏π‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á:</strong> ‡∏û‡πà‡∏≠‡∏•‡∏π‡∏Å (Arilek & Pojai ‡∏ß‡∏±‡∏¢ 11 ‡∏Ç‡∏ß‡∏ö)</p>
                    <p><strong>üí∞ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì:</strong> ~100,000 ‡∏ö‡∏≤‡∏ó + buffer 30-50k</p>
                    <p><strong>üéÇ ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÇ‡∏õ‡πÉ‡∏à:</strong> 9 ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏° (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 4 ‡∏Ç‡∏≠‡∏á‡∏ó‡∏£‡∏¥‡∏õ) üéâ</p>
                </div>
                <div class="en">
                    <p><strong>üìÖ Travel Dates:</strong> March 6-13, 2026 (8 Days 7 Nights)</p>
                    <p><strong>üë• Travelers:</strong> Father & Daughter (Arilek & Pojai age 11)</p>
                    <p><strong>üí∞ Budget:</strong> ~100,000 THB + buffer 30-50k</p>
                    <p><strong>üéÇ Pojai's Birthday:</strong> March 9 (Day 4 of trip) üéâ</p>
                </div>
            </div>
        </div>
        
        <!-- Day Navigation -->
        <h2>üìÖ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô</h2>
        <div class="nav-grid">
            <a href="#section-3" class="nav-card">
                <h3>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1</h3>
                <div class="date">6 ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏° 2026 (‡∏®‡∏∏‡∏Å‡∏£‡πå)</div>
                <div class="desc">‚úàÔ∏è ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏ñ‡∏∂‡∏á‡πÇ‡∏ï‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß - ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô - ‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô</div>
            </a>
            
            <a href="#section-4" class="nav-card">
                <h3>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 2</h3>
                <div class="date">7 ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏° 2026 (‡πÄ‡∏™‡∏≤‡∏£‡πå)</div>
                <div class="desc">üèÆ ‡∏≠‡∏≤‡∏ã‡∏≤‡∏Å‡∏∏‡∏™‡∏∞ - ‡∏ß‡∏±‡∏î‡πÄ‡∏ã‡πá‡∏ô‡πÇ‡∏ã‡∏à‡∏¥ - ‡∏™‡∏Å‡∏≤‡∏¢‡∏ó‡∏£‡∏µ</div>
            </a>
            
            <a href="#section-5" class="nav-card">
                <h3>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 3</h3>
                <div class="date">8 ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏° 2026 (‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå)</div>
                <div class="desc">üè∞ ‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏ä‡∏ß‡∏±‡∏á‡∏≠‡∏¥‡∏°‡∏û‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏• - ‡∏Å‡∏¥‡∏ô‡∏ã‡πà‡∏≤ - ‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á</div>
            </a>
            
            <a href="#section-6" class="nav-card" style="position: relative;">
                <div class="birthday-badge">üéÇ ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î</div>
                <h3>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 4</h3>
                <div class="date">9 ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏° 2026 (‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå)</div>
                <div class="desc">üéâ ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÇ‡∏õ‡πÉ‡∏à - ‡∏î‡∏¥‡∏™‡∏ô‡∏µ‡∏¢‡πå‡πÅ‡∏•‡∏ô‡∏î‡πå - ‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏û‡∏£‡∏™‡πå!</div>
            </a>
            
            <a href="#section-7" class="nav-card">
                <h3>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 5</h3>
                <div class="date">10 ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏° 2026 (‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£)</div>
                <div class="desc">üóº ‡πÇ‡∏ï‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß‡∏ó‡∏≤‡∏ß‡πÄ‡∏ß‡∏≠‡∏£‡πå - ‡∏£‡πâ‡∏≠‡∏õ‡∏õ‡∏á‡∏á‡∏¥ - ‡∏°‡∏¥‡∏î‡∏ó‡∏≤‡∏ß‡∏ô‡πå</div>
            </a>
            
            <a href="#section-8" class="nav-card">
                <h3>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 6</h3>
                <div class="date">11 ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏° 2026 (‡∏û‡∏∏‡∏ò)</div>
                <div class="desc">üå∏ ‡∏≠‡∏∏‡πÄ‡∏≠‡πÇ‡∏ô‡∏∞ - ‡∏™‡∏ß‡∏ô‡∏ã‡∏≤‡∏Å‡∏∏‡∏£‡∏∞ - ‡∏û‡∏¥‡∏û‡∏¥‡∏ò‡∏†‡∏±‡∏ì‡∏ë‡πå</div>
            </a>
            
            <a href="#section-9" class="nav-card">
                <h3>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 7</h3>
                <div class="date">12 ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏° 2026 (‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ)</div>
                <div class="desc">üèîÔ∏è ‡∏†‡∏π‡πÄ‡∏Ç‡∏≤‡πÑ‡∏ü‡∏ü‡∏π‡∏à‡∏¥ - ‡∏Æ‡∏≤‡πÇ‡∏Å‡πÄ‡∏ô‡πà - ‡∏≠‡∏≠‡∏ô‡πÄ‡∏ã‡πá‡∏ô</div>
            </a>
            
            <a href="#section-10" class="nav-card">
                <h3>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 8</h3>
                <div class="date">13 ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏° 2026 (‡∏®‡∏∏‡∏Å‡∏£‡πå)</div>
                <div class="desc">üéÅ ‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡∏ù‡∏≤‡∏Å - ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö</div>
            </a>
        </div>
    </section>
    '''
    
    def markdown_to_html(self, markdown_content):
        """‡πÅ‡∏õ‡∏•‡∏á markdown ‡πÄ‡∏õ‡πá‡∏ô HTML ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡∏£‡∏ß‡∏° tables, timelines, info boxes"""
        if not markdown_content.strip():
            return "<p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤</p>"
            
        html = markdown_content
        
        # Headers
        html = re.sub(r'^# (.+)$', r'<h1>\1</h1>', html, flags=re.MULTILINE)
        html = re.sub(r'^## (.+)$', r'<h2>\1</h2>', html, flags=re.MULTILINE)
        html = re.sub(r'^### (.+)$', r'<h3>\1</h3>', html, flags=re.MULTILINE)
        
        # Bold and italic
        html = re.sub(r'\*\*(.+?)\*\*', r'<strong>\1</strong>', html)
        html = re.sub(r'\*(.+?)\*', r'<em>\1</em>', html)
        
        # Tables (markdown style |col1|col2|)
        html = self.convert_tables(html)
        
        # Timeline items (- **time**: content)
        html = self.convert_timeline_items(html)
        
        # Info boxes (lines starting with üìå or ‚ö†Ô∏è or üí°)
        html = self.convert_info_boxes(html)
        
        # Lists
        html = self.convert_lists(html)
        
        # Paragraphs
        html = self.convert_paragraphs(html)
        
        return html
    
    def convert_tables(self, html):
    """‡πÅ‡∏õ‡∏•‡∏á markdown tables ‡πÄ‡∏õ‡πá‡∏ô HTML tables"""
    lines = html.split('\n')
    result = []
    in_table = False
    
    i = 0
    while i < len(lines):
        line = lines[i].strip()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô table header ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if '|' in line and not in_table and line.count('|') >= 2:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô separator ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if i + 1 < len(lines) and re.match(r'^\s*\|[\s\-\|:]*\|\s*$', lines[i + 1]):
                # ‡πÄ‡∏£‡∏¥‡πà‡∏° table
                in_table = True
                result.append('<div class="table-container">')
                result.append('<table>')
                result.append('<thead>')
                
                # Header row
                headers = [cell.strip() for cell in line.split('|') if cell.strip()]
                result.append('<tr>')
                for header in headers:
                        result.append(f'<th>{header}</th>')
                result.append('</tr>')
                result.append('</thead>')
                result.append('<tbody>')
                
                i += 2  # ‡∏Ç‡πâ‡∏≤‡∏° separator line
                continue
                
        elif '|' in line and in_table and line.count('|') >= 2:
            # Table row
            cells = [cell.strip() for cell in line.split('|') if cell.strip()]
            if cells:  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ cells
                result.append('<tr>')
                for cell in cells:
                    result.append(f'<td>{cell}</td>')
                result.append('</tr>')
            else:
                # ‡∏à‡∏ö table
                result.append('</tbody>')
                result.append('</table>')
                result.append('</div>')
                in_table = False
                
        elif in_table and ('|' not in line or line.count('|') < 2):
            # ‡∏à‡∏ö table
            result.append('</tbody>')
            result.append('</table>')
            result.append('</div>')
            in_table = False
            result.append(line)
            
        else:
            result.append(line)
            
        i += 1
    
    # ‡∏õ‡∏¥‡∏î table ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
    if in_table:
        result.append('</tbody>')
        result.append('</table>')
        result.append('</div>')
        
    return '\n'.join(result)

    def convert_timeline_items(self, html):
    """‡πÅ‡∏õ‡∏•‡∏á timeline items ‡πÄ‡∏õ‡πá‡∏ô HTML timeline"""
    lines = html.split('\n')
    result = []
    in_timeline = False
    timeline_id = 0
    
    for line in lines:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö timeline item pattern: - **time**: content
        timeline_match = re.match(r'^\s*-\s*\*\*([^*]+)\*\*:\s*(.+)', line)
        
        if timeline_match:
            if not in_timeline:
                result.append('<ul class="timeline">')
                in_timeline = True
                
            time_text = timeline_match.group(1)
            content_text = timeline_match.group(2)
            timeline_id += 1
            
            result.append('<li>')
            result.append(f'<div class="timeline-main"><strong>{time_text}</strong>: {content_text}</div>')
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏° toggle ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
            result.append(f'<button class="timeline-toggle" onclick="toggleTimelineDetail(\'timeline-{timeline_id}\')">')
            result.append('<span class="th">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‚ñº</span>')
            result.append('<span class="en">Details ‚ñº</span>')
            result.append('</button>')
            result.append(f'<div class="timeline-detail" id="timeline-{timeline_id}" style="display: none;">')
            result.append('<div class="timeline-sub-content">')
            
        elif line.strip().startswith('  -') and in_timeline:
            # Sub-item ‡∏Ç‡∏≠‡∏á timeline
            sub_content = line.strip()[2:].strip()  # ‡πÄ‡∏≠‡∏≤ "- " ‡∏≠‡∏≠‡∏Å
            result.append(f'<p>‚Ä¢ {sub_content}</p>')
            
        elif line.strip().startswith('  ') and in_timeline and line.strip():
            # ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
            detail_content = line.strip()
            result.append(f'<p>{detail_content}</p>')
            
        else:
            if in_timeline:
                # ‡∏õ‡∏¥‡∏î timeline detail ‡πÅ‡∏•‡∏∞ li
                result.append('</div>')
                result.append('</div>')
                result.append('</li>')
                
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà timeline item ‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î timeline
                if not re.match(r'^\s*-\s*\*\*([^*]+)\*\*:\s*(.+)', line):
                    result.append('</ul>')
                    in_timeline = False
                    
            result.append(line)
    
    # ‡∏õ‡∏¥‡∏î timeline ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
    if in_timeline:
        result.append('</div>')
        result.append('</div>')
        result.append('</li>')
        result.append('</ul>')
        
    return '\n'.join(result)
    
    def convert_info_boxes(self, html):
        """‡πÅ‡∏õ‡∏•‡∏á info boxes ‡∏à‡∏≤‡∏Å special markers"""
        lines = html.split('\n')
        result = []
        in_info_box = False
        box_type = ''
        
        for line in lines:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö info box markers
            if line.strip().startswith('üìå') or line.strip().startswith('üí°') or line.strip().startswith('‚ö†Ô∏è'):
                if in_info_box:
                    result.append('</div>')
                    
                box_type = 'info' if line.strip().startswith('üìå') or line.strip().startswith('üí°') else 'note'
                content = line.strip()[2:].strip()  # ‡πÄ‡∏≠‡∏≤ emoji ‡∏≠‡∏≠‡∏Å
                
                result.append(f'<div class="{box_type}-box">')
                result.append(f'<strong>{content}</strong>')
                in_info_box = True
                
            elif in_info_box and line.strip() == '':
                result.append('</div>')
                in_info_box = False
                result.append(line)
                
            else:
                result.append(line)
                
        # ‡∏õ‡∏¥‡∏î info box ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
        if in_info_box:
            result.append('</div>')
            
        return '\n'.join(result)
    
    def convert_lists(self, html):
        """‡πÅ‡∏õ‡∏•‡∏á lists"""
        lines = html.split('\n')
        result = []
        in_list = False
        
        for line in lines:
            if re.match(r'^\s*[-*]\s+', line):
                if not in_list:
                    result.append('<ul>')
                    in_list = True
                item = re.sub(r'^\s*[-*]\s+', '', line)
                result.append(f'<li>{item}</li>')
            else:
                if in_list:
                    result.append('</ul>')
                    in_list = False
                result.append(line)
        
        if in_list:
            result.append('</ul>')
            
        return '\n'.join(result)
    
    def convert_paragraphs(self, html):
        """‡πÅ‡∏õ‡∏•‡∏á paragraphs"""
        lines = html.split('\n')
        result = []
        
        for line in lines:
            if line.strip() and not line.startswith('<') and not re.match(r'^\s*[-*]\s+', line):
                result.append(f'<p>{line.strip()}</p>')
            else:
                result.append(line)
                
        return '\n'.join(result)
    
def get_content_section(self, file_number, title_th, title_en=None):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á section ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå content"""
        if title_en is None:
            title_en = title_th
            
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå thai
        th_file = self.th_dir / f"{file_number:03d}-{title_th.lower().replace(' ', '-')}.md"
        th_content = self.read_markdown_file(th_file)
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå english (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        en_file = self.en_dir / f"{file_number:03d}-{title_en.lower().replace(' ', '-')}.md"
        en_content = self.read_markdown_file(en_file)
        if not en_content:
            en_content = th_content  # fallback ‡πÉ‡∏ä‡πâ thai
        
        # ‡πÅ‡∏õ‡∏•‡∏á markdown ‡πÄ‡∏õ‡πá‡∏ô HTML
        th_html = self.markdown_to_html(th_content)
        en_html = self.markdown_to_html(en_content)
        
        return f'''
        <section class="section" id="section-{file_number}">
            <div class="th-block">
                <div class="content">{th_html}</div>
            </div>
            <div class="en-block" style="display: none;">
                <div class="content">{en_html}</div>
            </div>
        </section>
        '''

def get_back_to_top(self):
    """Back to top button"""
    return '''
<!-- Back to Top -->
<a href="#" class="back-to-top">‚¨Ü</a>
'''

def get_javascript(self):
    """JavaScript ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö language switching ‡πÅ‡∏•‡∏∞ timeline functionality"""
    return '''
<!-- Back to Top -->
<a href="#" class="back-to-top">‚¨Ü</a>

<script>
    // Language switching
    function switchLanguage(lang) {
        const body = document.body;
        const buttons = document.querySelectorAll('.lang-btn');
        
        body.classList.remove('lang-th', 'lang-en');
        body.classList.add(`lang-${lang}`);
        
        buttons.forEach(btn => {
            btn.classList.remove('active');
            if (btn.getAttribute('data-lang') === lang) {
                btn.classList.add('active');
            }
        });
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å language preference
        try {
            localStorage.setItem('tokyo-trip-lang', lang);
        } catch (e) {
            console.warn('Cannot save language preference:', e);
        }
        
        console.log(`Language switched to: ${lang}`);
    }

    // Timeline toggle functionality
    function toggleTimelineDetail(detailId) {
        const detail = document.getElementById(detailId);
        const button = document.querySelector(`[onclick="toggleTimelineDetail('${detailId}')"]`);
        
        if (!detail || !button) {
            console.warn(`Timeline detail not found: ${detailId}`);
            return;
        }
        
        const isHidden = detail.style.display === 'none' || !detail.style.display;
        
        if (isHidden) {
            detail.style.display = 'block';
            button.innerHTML = button.innerHTML.replace('‚ñº', '‚ñ≤');
            button.classList.add('expanded');
            console.log(`Timeline detail expanded: ${detailId}`);
        } else {
            detail.style.display = 'none';
            button.innerHTML = button.innerHTML.replace('‚ñ≤', '‚ñº');
            button.classList.remove('expanded');
            console.log(`Timeline detail collapsed: ${detailId}`);
        }
    }
    
    // Make toggleTimelineDetail globally available
    window.toggleTimelineDetail = toggleTimelineDetail;
    
    // Initialize timeline functionality
    function initializeTimelineToggle() {
        console.log('üîß Initializing timeline toggle...');
        
        // Find all timeline detail elements and hide them initially
        const timelineDetails = document.querySelectorAll('.timeline-detail');
        timelineDetails.forEach(detail => {
            detail.style.display = 'none';
        });
        
        console.log(`‚úÖ Timeline toggle initialized for ${timelineDetails.length} details`);
    }

    // Smooth scrolling
    function initializeSmoothScrolling() {
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });
        console.log('‚úÖ Smooth scrolling initialized');
    }

    // Back to top button
    function initializeBackToTop() {
        const backToTop = document.querySelector('.back-to-top');
        if (backToTop) {
            window.addEventListener('scroll', function() {
                if (window.pageYOffset > 300) {
                    backToTop.style.opacity = '1';
                    backToTop.style.pointerEvents = 'auto';
                } else {
                    backToTop.style.opacity = '0.5';
                    backToTop.style.pointerEvents = 'none';
                }
            });
            
            backToTop.addEventListener('click', function(e) {
                e.preventDefault();
                window.scrollTo({
                    top: 0,
                    behavior: 'smooth'
                });
            });
            
            console.log('‚úÖ Back to top button initialized');
        }
    }

    // Loading animation
    function showLoadingComplete() {
        setTimeout(() => {
            console.log('üéâ Tokyo Trip 2026 - Complete Guide Ready with ALL FEATURES!');
            
            // Show a brief loading complete message
            const loadingMsg = document.createElement('div');
            loadingMsg.style.cssText = `
                position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
                background: linear-gradient(135deg, #2E86AB, #A23B72); color: white;
                padding: 1rem 2rem; border-radius: 10px; z-index: 10000;
                font-weight: 600; box-shadow: 0 4px 20px rgba(0,0,0,0.3);
            `;
            loadingMsg.textContent = 'üáØüáµ Tokyo Trip Guide Ready! üéâ';
            document.body.appendChild(loadingMsg);
            
            setTimeout(() => {
                loadingMsg.style.opacity = '0';
                loadingMsg.style.transition = 'opacity 0.5s';
                setTimeout(() => loadingMsg.remove(), 500);
            }, 1500);
        }, 500);
    }

    // Main initialization
    document.addEventListener('DOMContentLoaded', function() {
        console.log('üáØüáµ Tokyo Trip 2026 - Complete Guide Loading...');
        
        // Language setup
        try {
            const savedLang = localStorage.getItem('tokyo-trip-lang');
            if (savedLang && (savedLang === 'th' || savedLang === 'en')) {
                switchLanguage(savedLang);
            } else {
                switchLanguage('th'); // default to Thai
            }
        } catch (e) {
            console.warn('Cannot load language preference:', e);
            switchLanguage('th');
        }
        
        // Setup language switcher buttons
        document.querySelectorAll('[data-lang]').forEach(btn => {
            btn.addEventListener('click', function() {
                const lang = this.getAttribute('data-lang');
                switchLanguage(lang);
            });
        });
        
        // Initialize all features
        initializeTimelineToggle();
        initializeSmoothScrolling();
        initializeBackToTop();
        
        // Show loading complete message
        showLoadingComplete();
        
        console.log('üöÄ All features initialized successfully!');
    });
    
    // Error handling
    window.addEventListener('error', function(e) {
        console.error('JavaScript Error:', e.error);
    });
    
    // Performance monitoring
    window.addEventListener('load', function() {
        console.log(`üìä Page loaded in ${Math.round(performance.now())}ms`);
    });
</script>
</body>
</html>'''

def generate_html(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á HTML file ‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ ‡∏û‡∏£‡πâ‡∏≠‡∏° navigation ‡πÅ‡∏•‡∏∞ features ‡∏Ñ‡∏£‡∏ö"""
        print("üáØüáµ TOKYO TRIP GENERATOR - REFACTORED VERSION üáØüáµ")
        print("=" * 70)
        print("üìÅ Reading content from:")
        print(f"   üìÑ TH: {self.th_dir}")
        print(f"   üìÑ EN: {self.en_dir}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå content ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not self.th_dir.exists():
            print(f"‚ö†Ô∏è Warning: Thai content directory not found: {self.th_dir}")
        if not self.en_dir.exists():
            print(f"‚ö†Ô∏è Warning: English content directory not found: {self.en_dir}")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á HTML
        html_parts = []
        
        # 1. HTML Header ‡πÅ‡∏•‡∏∞ CSS
        html_parts.append(self.get_html_header())
        html_parts.append(self.get_css_content_and_timeline())
        html_parts.append('    </style>\n</head>\n<body class="lang-th">')
        
        # 2. Navigation ‡πÅ‡∏•‡∏∞ body start
        html_parts.append(self.get_navigation_and_body_start())
        
        # 3. ‡πÄ‡∏û‡∏¥‡πà‡∏° navigation overview ‡∏Å‡πà‡∏≠‡∏ô
        html_parts.append(self.get_navigation_overview())
        
        # 4. ‡πÄ‡∏û‡∏¥‡πà‡∏° content sections
        content_files = [
            (1, "overview"),
            (2, "accommodation"), 
            (3, "day1"),
            (4, "day2"),
            (5, "day3"),
            (6, "day4"),
            (7, "day5"),
            (8, "day6"),
            (9, "day7"),
            (10, "day8"),
            (11, "transportation"),
            (12, "weather"),
            (13, "budget"),
            (14, "tips")
        ]
        
        print("\nüìù Adding content sections:")
        for file_num, title in content_files:
            print(f"   üîÑ Processing: {file_num:03d}-{title}.md")
            section_html = self.get_content_section(file_num, title)
            html_parts.append(section_html)
        
        # 5. ‡∏õ‡∏¥‡∏î container ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° JavaScript
        html_parts.append("\n    </div>  <!-- end container -->")
        html_parts.append(self.get_javascript())
        
        # ‡∏£‡∏ß‡∏° HTML ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        html_content = ''.join(html_parts)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
        timestamp = datetime.datetime.now().strftime("%Y%m%d-%H%M")
        filename = f"Tokyo-Trip-March-2026-REFACTORED-{timestamp}.html"
        output_path = self.build_dir / filename
        
        try:
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            print(f"\nüéâ HTML Generated Successfully!")
            print(f"üìÑ File: {filename}")
            print(f"üìä Size: {len(html_content):,} characters ({len(html_content)/1024:.1f} KB)")
            print(f"üìç Path: {output_path}")
            
            # Features summary
            print(f"\nüöÄ Features included:")
            features = [
                "‚úÖ Beautiful responsive design",
                "‚úÖ Navigation overview with day cards", 
                "‚úÖ Timeline with expand/collapse functionality",
                "‚úÖ HTML tables from markdown",
                "‚úÖ Language switching (TH/EN) with localStorage",
                "‚úÖ Birthday badge animation",
                "‚úÖ Smooth scrolling navigation",
                "‚úÖ Back to top button with scroll detection",
                "‚úÖ Mobile responsive design",
                "‚úÖ Loading animations and error handling",
                "‚úÖ Performance monitoring"
            ]
            
            for feature in features:
                print(f"   {feature}")
            
            # Size analysis
            if len(html_content) > 800000:
                print(f"\nüéØ Target achieved: >800KB content! ({len(html_content)/1024:.1f} KB)")
            else:
                print(f"\nüìè Current size: {len(html_content)/1024:.1f}KB")
                if len(html_content) > 500000:
                    print("   üìà Good size - approaching target!")
                else:
                    print("   üìù Consider adding more content to reach 800KB target")
            
            # Content breakdown
            sections_count = len(content_files)
            avg_section_size = len(html_content) / sections_count if sections_count > 0 else 0
            print(f"\nüìä Content breakdown:")
            print(f"   üìë Total sections: {sections_count}")
            print(f"   üìè Average section size: {avg_section_size/1024:.1f} KB")
            
        except Exception as e:
            print(f"\n‚ùå Error writing file: {e}")
            return None
            
        return output_path

def validate_content_structure(self):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå content"""
    print("\nüîç Validating content structure...")
    
    issues = []
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å
    if not self.content_dir.exists():
        issues.append(f"‚ùå Content directory missing: {self.content_dir}")
    
    if not self.th_dir.exists():
        issues.append(f"‚ùå Thai content directory missing: {self.th_dir}")
        
    if not self.en_dir.exists():
        issues.append(f"‚ö†Ô∏è English content directory missing: {self.en_dir}")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
    expected_files = [
        "001-overview.md", "002-accommodation.md", "003-day1.md", "004-day2.md",
        "005-day3.md", "006-day4.md", "007-day5.md", "008-day6.md",
        "009-day7.md", "010-day8.md", "011-transportation.md", "012-weather.md",
        "013-budget.md", "014-tips.md"
    ]
    
    if self.th_dir.exists():
        for filename in expected_files:
            filepath = self.th_dir / filename
            if not filepath.exists():
                issues.append(f"‚ö†Ô∏è Missing Thai file: {filename}")
    
    if issues:
        print("üìã Issues found:")
        for issue in issues:
            print(f"   {issue}")
    else:
        print("‚úÖ Content structure looks good!")
        
    return len(issues) == 0

def main():
    """Entry point ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö script"""
    print("üéå Tokyo Trip Generator - Starting...")
    print("üîß Refactored version with improved error handling")
    print()
    
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á generator instance
        generator = TokyoTripGenerator()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå
        generator.validate_content_structure()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML
        output_file = generator.generate_html()
        
        if output_file:
            print(f"\nüöÄ Ready to use: {output_file}")
            print(f"üåê Open the HTML file in your browser to view the guide!")
            print(f"üì± The guide is mobile-responsive and works offline!")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            print(f"\nüí° Usage tips:")
            print(f"   üîÑ Use language switcher (TH/EN) in top-right corner")
            print(f"   üìÖ Click day cards to jump to specific day plans")
            print(f"   üîç Click '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î' buttons to expand timeline details")
            print(f"   ‚¨Ü Use back-to-top button for easy navigation")
            
        else:
            print("\n‚ùå Failed to generate HTML file")
            return 1
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Generation cancelled by user")
        return 1
        
    except Exception as e:
        print(f"\nüí• Unexpected error: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0

if __name__ == "__main__":
    exit_code = main()
    exit(exit_code)
    